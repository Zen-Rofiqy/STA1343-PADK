}
#Export chart
export.chart <- "C:/Users/Fathan/Documents/Obsidian Vault/2. Kuliah/Smt 5/8. Pengantar Sains Data/Tugas/Tugas Akhir/Chart"
export.chart
for(i in 1:nrow(data)){
chart <- radarchart(df[c("Max", "Min", rownames(data)[i]),])
ggsave(rownames(data)[i] , chart, path = export.chart,
dpi = 300, height = 12, width = 12)
}
aceh <- df[c("Max", "Min", rownames(data)[1]),]
radarchart(aceh)
for(i in 1:nrow(data)){
chart <- radarchart(df[c("Max", "Min", rownames(data)[i]),])
ggsave(paste0(rownames(data)[i], ".png") , chart, path = export.chart,
dpi = 300, height = 12, width = 12)
}
boxplot(dtx)
res.fcm2 <- ppclust2(res.fcm, "kmeans")
fviz_cluster(res.fcm2, data = dtx,
ellipse.type = "convex",
palette = "jco",
repel = TRUE)
res.fcm3 <- ppclust2(res.fcm, "fanny")
cluster::clusplot(scale(dtx), res.fcm3$cluster,
main = "Cluster plot of Iris data set",
color=TRUE, labels = 2, lines = 2, cex=1)
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
#Path Function
path <- function(){
gsub  ( "\\\\",  "/",  readClipboard ()  )
}
#Copy path, Panggil function di console
#Copy r path, paste ke var yang diinginkan
install_load('dplyr', 'DT', 'tidyr', 'stringr')
# Mengubah Tabel Kontingensi ke dalam Data Frame R
data <- data.frame(
City = rep(c("Beijing", "Shanghai", "Shenyang", "Nanjing", "Harbin", "Zehgzhou", "Taiyuan", "Nanchang"), each = 2),
Smoking = rep(c("Yes", "No"), times = 8),
LungCancer_Yes = c(126, 35, 908, 497, 913, 336, 235, 58, 402, 121, 182, 72, 60, 11, 104, 21),
LungCancer_No = c(100, 61, 688, 807, 747, 598, 172, 121, 308, 215, 156, 98, 99, 43, 89, 36)
)
datatable(data)
data2 <- data %>%
pivot_longer(cols = c("LungCancer_Yes", "LungCancer_No"),
names_to = "LungCancer", values_to = "Count") %>%
mutate(LungCancer = ifelse(str_detect(LungCancer, "Yes"), "Yes", "No")) %>%
uncount(weights = Count) %>%
select(City, Smoking, LungCancer) %>%
mutate(
City = as.factor(City),
Smoking = as.factor(Smoking),
LungCancer = as.factor(LungCancer)
)
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
#Path Function
path <- function(){
gsub  ( "\\\\",  "/",  readClipboard ()  )
}
#Copy path, Panggil function di console
#Copy r path, paste ke var yang diinginkan
install_load('dplyr', 'DT', 'tidyr', 'stringr')
# Mengubah Tabel Kontingensi ke dalam Data Frame R
data <- data.frame(
City = rep(c("Beijing", "Shanghai", "Shenyang", "Nanjing", "Harbin", "Zehgzhou", "Taiyuan", "Nanchang"), each = 2),
Smoking = rep(c("Yes", "No"), times = 8),
LungCancer_Yes = c(126, 35, 908, 497, 913, 336, 235, 58, 402, 121, 182, 72, 60, 11, 104, 21),
LungCancer_No = c(100, 61, 688, 807, 747, 598, 172, 121, 308, 215, 156, 98, 99, 43, 89, 36)
)
datatable(data)
data2 <- data %>%
pivot_longer(cols = c("LungCancer_Yes", "LungCancer_No"),
names_to = "LungCancer", values_to = "Count") %>%
mutate(LungCancer = ifelse(str_detect(LungCancer, "Yes"), "Yes", "No")) %>%
uncount(weights = Count) %>%
select(City, Smoking, LungCancer) %>%
mutate(
City = as.factor(City),
Smoking = as.factor(Smoking),
LungCancer = as.factor(LungCancer)
)
data2 <- data %>%
pivot_longer(cols = c("LungCancer_Yes", "LungCancer_No"),
names_to = "LungCancer", values_to = "Count") %>%
mutate(LungCancer = ifelse(str_detect(LungCancer, "Yes"), "Yes", "No")) %>%
uncount(weights = Count) %>%
dplyr::select(City, Smoking, LungCancer) %>%
mutate(
City = as.factor(City),
Smoking = as.factor(Smoking),
LungCancer = as.factor(LungCancer)
)
datatable(data2)
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
#Path Function
path <- function(){
gsub  ( "\\\\",  "/",  readClipboard ()  )
}
#Copy path, Panggil function di console
#Copy r path, paste ke var yang diinginkan
install_load('dplyr', 'DT', 'tidyr', 'stringr')
# Mengubah Tabel Kontingensi ke dalam Data Frame R
data <- data.frame(
City = rep(c("Beijing", "Shanghai", "Shenyang", "Nanjing", "Harbin", "Zehgzhou", "Taiyuan", "Nanchang"), each = 2),
Smoking = rep(c("Yes", "No"), times = 8),
LungCancer_Yes = c(126, 35, 908, 497, 913, 336, 235, 58, 402, 121, 182, 72, 60, 11, 104, 21),
LungCancer_No = c(100, 61, 688, 807, 747, 598, 172, 121, 308, 215, 156, 98, 99, 43, 89, 36)
)
datatable(data)
data2 <- data %>%
pivot_longer(cols = c("LungCancer_Yes", "LungCancer_No"),
names_to = "LungCancer", values_to = "Count") %>%
mutate(LungCancer = ifelse(str_detect(LungCancer, "Yes"), "Yes", "No")) %>%
uncount(weights = Count) %>%
dplyr::select(City, Smoking, LungCancer) %>%
mutate(
City = as.factor(City),
Smoking = as.factor(Smoking),
LungCancer = as.factor(LungCancer)
)
datatable(data2)
str(data2)
data_restored <- data2 %>%
group_by(City, Smoking, LungCancer, .drop = TRUE) %>%
summarize(Count = n(), .groups = 'drop') %>%
pivot_wider(names_from = LungCancer, values_from = Count) %>%
ungroup()
datatable(data_restored)
model <- glm(LungCancer ~ Smoking + City, data = data2, family = binomial)
summary(model)
no1 <- data.frame(R = summary(model)[["coefficients"]]["SmokingYes",1] %>%
round(.,4),
SAS = 0.7704,
MiniTab = 0.7771)
datatable(no1)
summary_model <- summary(model)
rasio.odds <- exp(coef(model)) %>% round(.,3)
p.value <- summary(model)$coefficients[, "Pr(>|z|)"] %>%
sprintf("%.2e", .)
datatable(data.frame(rasio.odds[1:2], p.value[1:2]))
install_load('car')
anova <- Anova(model, type="II", test.statistic="Wald"); anova
no2 <- data.frame(R = c(rasio.odds[1:2][[2]],
anova$Chisq[1] %>% round(.,4),
anova$`Pr(>Chisq)`[1] %>% sprintf("%.2e", .)),
SAS = c(2.161, 274.4587, "<0.0001"),
MiniTab = c(2.1751, NA, NA))
rownames(no2) <- c("Rasio Odds", "Statistik Wald", "P-Value")
datatable(no2)
rasio.odds[1:2]
model2 <- glm(LungCancer ~ City, data = data2, family = binomial)
summary(model2)
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, (model)); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model)); hoslem
model$y
View(data)
View(data1)
View(data2)
head(data2)
model <- glm(LungCancer ~ City + Smoking, data = data2, family = binomial)
summary(model)
model <- glm(LungCancer ~ Smoking + City, data = data2, family = binomial)
summary(model)
summary(model1)
summary(model)
?hoslem.test
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 10); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 5); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 9); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 11); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 11); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 9.5); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 9.2); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 9); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 8); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 8); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 10); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 9); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 8); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 10); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 9); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 7); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 8); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 10); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 9); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 7); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 6); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 10); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 9); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 8); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 7); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 6); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 5); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 10); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 9); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 8); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 7); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 6); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 5); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 4); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 10); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 9); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 8); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 7); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 6); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 5); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 4); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 3); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 10); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 9); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 8); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 7); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 6); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 5); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 4); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 3); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 2); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 10); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 9); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 8); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 7); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 6); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 5); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 4); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 3); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 2); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 1); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 11); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 10); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 9); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 8); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 7); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 6); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 5); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 4); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 3); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 2); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 1); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 12); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 11); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 10); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 9); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 8); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 7); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 6); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 5); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 4); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 3); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 2); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 1); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 13); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 12); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 11); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 10); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 9); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 8); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 7); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 6); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 5); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 4); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 3); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 2); hoslem
hoslem <- hoslem.test(model$y, fitted(model), g = 1); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 10); hoslem
install_load("ResourceSelection")
hoslem <- hoslem.test(model$y, fitted(model), g = 10); hoslem
garchFit11
#GARCH(1,1)
garchSpec11 <- ugarchspec(
variance.model=list(model="sGARCH",
garchOrder=c(1,1)),
mean.model=list(armaOrder=c(0,2)) )
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
#Path Function
path <- function(){
gsub  ( "\\\\",  "/",  readClipboard ()  )
}
#Copy path, Panggil function di console
#Copy r path, paste ke var yang diinginkan
#Export chart
export.chart <- "C:/Users/Fathan/Documents/Obsidian Vault/2. Kuliah/Smt 5/6. Metode Peramalan Deret Waktu/@Proj/STA1341-MPDW/Pertemuan 10/Chart2"
install_load('rio')
raw.data <- import("https://raw.githubusercontent.com/Zen-Rofiqy/STA1341-MPDW/main/Data/New/%40MAANG%20Stock%20Prices.csv")
str(raw.data)
sum(is.na(raw.data))
install_load('dplyr')
data <- raw.data %>%
mutate(
Date = as.Date(raw.data[, 2], format = "%m/%d/%y"), #Mengubah menjadi Date
across(3:ncol(raw.data), as.numeric)                #Mengubah menjadi Numerik
)
str(data)
cat('Banyaknya Data Kosong', sum(is.na(data)))
data2 <- data
install_load("lubridate")
dates <- as.Date(data$Date)
# Buat rentang waktu mulai dari tanggal pertama hingga tanggal terakhir dalam data
full_date_range <- seq(min(dates), max(dates), by = "days")
# Bandingkan rentang waktu dengan tanggal yang ada dalam data
missing_dates <- setdiff(full_date_range, dates)
# Jika 'missing_dates' kosong, maka semua tanggal sudah ada dalam data
if (length(missing_dates) == 0) {
cat("Semua tanggal ada dalam data.\n")
} else {
cat("Tanggal yang tidak ada dalam data sebanyak", length(missing_dates),
"\nAtau sebanyak", length(missing_dates) * 7,
"Data Hilang dari ke-7 perusahaan yang ada")
}
install_load('purrr')
# Fungsi untuk mengisi data yang hilang
fill_missing_data <- function(name) {
data_filtered <- data2 %>%
filter(Name == name)
full_date_range <- seq(min(data2$Date), max(data2$Date), by = "days")
data_frame_template <- data.frame(Date = full_date_range)
# Menambahkan kolom "Name" sesuai dengan perusahaan yang diproses
data_frame_template$Name <- name
data_filled <- merge(data_frame_template, data_filtered,
by = c("Date", "Name"), all.x = TRUE)
return(data_filled)
}
# Menggunakan purrr::map untuk memproses setiap nama perusahaan
filled_data_list <- map(unique(data2$Name), fill_missing_data)
# Gabungkan data-data yang telah diisi menjadi satu data frame
final_data <- data.frame()
final_data <- do.call(rbind, filled_data_list)
# Urutkan data berdasarkan "Name" terlebih dahulu, kemudian "Date"
final_data <- final_data %>%
dplyr::select(1, 2, 7) %>%
arrange(Name, Date)
#Input Data Hilang
install_load('imputeTS')
data <- na_interpolation(final_data$`Adj Close`)
install_load('ggplot2')
chart <- ggplot_na_imputations(final_data$`Adj Close`, data)
chart
#Export Chart
ggsave("00_Imputasi Data.png", chart, path = export.chart,
dpi = 300, height = 12, width = 23)
data <- final_data %>% select(Name, Date) %>%
mutate(`Adj Close` = data)
#GARCH(1,1)
garchSpec11 <- ugarchspec(
variance.model=list(model="sGARCH",
garchOrder=c(1,1)),
mean.model=list(armaOrder=c(0,2)) )
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
#Path Function
path <- function(){
gsub  ( "\\\\",  "/",  readClipboard ()  )
}
#Copy path, Panggil function di console
#Copy r path, paste ke var yang diinginkan
#Export chart
export.chart <- "C:/Users/Fathan/Documents/Obsidian Vault/2. Kuliah/Smt 5/6. Metode Peramalan Deret Waktu/@Proj/STA1341-MPDW/Pertemuan 10/Chart2"
install_load('rio')
raw.data <- import("https://raw.githubusercontent.com/Zen-Rofiqy/STA1341-MPDW/main/Data/New/%40MAANG%20Stock%20Prices.csv")
str(raw.data)
sum(is.na(raw.data))
install_load('dplyr')
data <- raw.data %>%
mutate(
Date = as.Date(raw.data[, 2], format = "%m/%d/%y"), #Mengubah menjadi Date
across(3:ncol(raw.data), as.numeric)                #Mengubah menjadi Numerik
)
str(data)
cat('Banyaknya Data Kosong', sum(is.na(data)))
data2 <- data
install_load("lubridate")
dates <- as.Date(data$Date)
# Buat rentang waktu mulai dari tanggal pertama hingga tanggal terakhir dalam data
full_date_range <- seq(min(dates), max(dates), by = "days")
# Bandingkan rentang waktu dengan tanggal yang ada dalam data
missing_dates <- setdiff(full_date_range, dates)
# Jika 'missing_dates' kosong, maka semua tanggal sudah ada dalam data
if (length(missing_dates) == 0) {
cat("Semua tanggal ada dalam data.\n")
} else {
cat("Tanggal yang tidak ada dalam data sebanyak", length(missing_dates),
"\nAtau sebanyak", length(missing_dates) * 7,
"Data Hilang dari ke-7 perusahaan yang ada")
}
install_load('purrr')
# Fungsi untuk mengisi data yang hilang
fill_missing_data <- function(name) {
data_filtered <- data2 %>%
filter(Name == name)
full_date_range <- seq(min(data2$Date), max(data2$Date), by = "days")
data_frame_template <- data.frame(Date = full_date_range)
# Menambahkan kolom "Name" sesuai dengan perusahaan yang diproses
data_frame_template$Name <- name
data_filled <- merge(data_frame_template, data_filtered,
by = c("Date", "Name"), all.x = TRUE)
return(data_filled)
}
# Menggunakan purrr::map untuk memproses setiap nama perusahaan
filled_data_list <- map(unique(data2$Name), fill_missing_data)
# Gabungkan data-data yang telah diisi menjadi satu data frame
final_data <- data.frame()
final_data <- do.call(rbind, filled_data_list)
# Urutkan data berdasarkan "Name" terlebih dahulu, kemudian "Date"
final_data <- final_data %>%
dplyr::select(1, 2, 7) %>%
arrange(Name, Date)
#Input Data Hilang
install_load('imputeTS')
data <- na_interpolation(final_data$`Adj Close`)
install_load('ggplot2')
chart <- ggplot_na_imputations(final_data$`Adj Close`, data)
chart
#Export Chart
ggsave("00_Imputasi Data.png", chart, path = export.chart,
dpi = 300, height = 12, width = 23)
data <- final_data %>% select(Name, Date) %>%
mutate(`Adj Close` = data)
